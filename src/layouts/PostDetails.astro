---
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Tag from "@components/Tag.astro";
import DateTime from "@components/search/Datetime.tsx";
import type { CollectionEntry } from "astro:content";
import { slugifyStr } from "@utils/slugify";
import ShareLinks from "@components/ShareLinks.astro";
import { SITE } from "@config";
import { Image } from "astro:assets";

export interface Props {
	post: CollectionEntry<"blog">;
}

const { post } = Astro.props;

const {
	title,
	author,
	description,
	ogImage,
	canonicalURL,
	pubDatetime,
	modDatetime,
	tags,
} = post.data;

const { Content } = await post.render();

var showImage: boolean = true;

if (ogImage === undefined) {
	showImage = false;
}

var ogImageUrl = typeof ogImage === "string" ? ogImage : ogImage?.src;

ogImageUrl = ogImageUrl?.startsWith("http")
	? ogImageUrl
	: `${SITE.base}/${ogImageUrl}`;

const ogUrl = new URL(
	ogImageUrl ?? `${SITE.base}/posts/${slugifyStr(title)}.png`,
	Astro.url.origin
).href;

const layoutProps = {
	title: `${title} | ${SITE.title}`,
	author,
	description,
	pubDatetime,
	modDatetime,
	canonicalURL,
	ogImage: showImage ? ogUrl : SITE.ogImage,
	scrollSmooth: true,
};
---

<Layout {...layoutProps}>
	<Header />

	<div class="mx-auto flex w-full max-w-3xl justify-start px-2">
		<button
			class="focus-outline mb-2 mt-8 flex hover:opacity-75"
			onclick="(() => (history.length === 1) ? window.location = '/' : history.back())()"
		>
			<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor"
				><path
					d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
				></path>
			</svg><span>Go back</span>
		</button>
	</div>
	<main id="main-content">
		<h1 transition:name={slugifyStr(title)} class="post-title">{title}</h1>
		<div class="flex items-center space-x-2 opacity-80">
			<DateTime
				pubDatetime={pubDatetime}
				modDatetime={modDatetime}
				size="lg"
				className="my-2"
			/>
			<span aria-hidden="true"> Â· </span>
			<span> {author} </span>
		</div>

		<div class="h-10"></div>
		{
			showImage ? (
				<a href={ogImageUrl} target="_blank">
					<Image
						src={ogImageUrl}
						alt={title}
						height={1}
						width={1}
						loading="eager"
						transition:name={slugifyStr(ogImageUrl)}
					/>
				</a>
			) : null
		}
		<article id="article" class="prose mx-auto mt-8 max-w-3xl">
			<Content />
		</article>

		<ul class="my-8">
			{tags.map(tag => <Tag tag={slugifyStr(tag)} />)}
		</ul>

		<div
			class="flex flex-col-reverse items-center justify-between gap-6 sm:flex-row-reverse sm:items-end sm:gap-4"
		>
			<button
				id="back-to-top"
				class="focus-outline whitespace-nowrap py-1 hover:opacity-75"
			>
				<svg xmlns="http://www.w3.org/2000/svg" class="rotate-90">
					<path
						d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
					></path>
				</svg>
				<span>Back to Top</span>
			</button>

			<ShareLinks />
		</div>
	</main>
	<Footer />
</Layout>

<style>
	main {
		@apply mx-auto w-full max-w-3xl px-4 pb-12;
	}
	.post-title {
		@apply text-4xl font-bold text-skin-accent;
	}
	img {
		@apply mb-4 max-h-96 w-full rounded-lg object-cover;
	}
</style>

<script is:inline>
	/** Create a progress indicator at the top */
	function createProgressBar() {
		// Create the main container div
		const progressContainer = document.createElement("div");
		progressContainer.className =
			"progress-container fixed top-0 z-10 h-1 w-full bg-skin-fill";

		// Create the progress bar div
		const progressBar = document.createElement("div");
		progressBar.className = "progress-bar h-1 w-0 bg-skin-accent";
		progressBar.id = "myBar";

		// Append the progress bar to the progress container
		progressContainer.appendChild(progressBar);

		// Append the progress container to the document body or any other desired parent element
		document.body.appendChild(progressContainer);
	}
	createProgressBar();

	/** Update the progress bar when user scrolls */
	function updateScrollProgress() {
		const winScroll =
			document.body.scrollTop || document.documentElement.scrollTop;
		const height =
			document.documentElement.scrollHeight -
			document.documentElement.clientHeight;
		const scrolled = (winScroll / height) * 100;
		if (document) {
			const myBar = document.getElementById("myBar");
			if (myBar) {
				myBar.style.width = scrolled + "%";
			}
		}
	}
	document.addEventListener("scroll", updateScrollProgress);

	/** Attaches links to headings in the document, 
	allowing sharing of sections easily */
	function addHeadingLinks() {
		let headings = Array.from(document.querySelectorAll("h2, h3, h4, h5, h6"));
		for (let heading of headings) {
			heading.classList.add("group");
			const link = document.createElement("a");
			link.className =
				"heading-link ml-2 opacity-0 group-hover:opacity-100 focus:opacity-100";
			link.href = "#" + heading.id;

			const span = document.createElement("span");
			span.ariaHidden = "true";
			span.innerText = "#";
			link.appendChild(span);
			heading.appendChild(link);
		}
	}
	addHeadingLinks();

	/** Attaches copy buttons to code blocks in the document,
	allowing users to copy code easily. */
	function attachCopyButtons() {
		let copyButtonLabel = "Copy";
		let codeBlocks = Array.from(document.querySelectorAll("pre"));

		for (let codeBlock of codeBlocks) {
			let wrapper = document.createElement("div");
			wrapper.style.position = "relative";

			let copyButton = document.createElement("button");
			copyButton.className =
				"copy-code absolute right-3 -top-3 rounded bg-skin-card px-2 py-1 text-xs leading-4 text-skin-base font-medium";
			copyButton.innerHTML = copyButtonLabel;
			codeBlock.setAttribute("tabindex", "0");
			codeBlock.appendChild(copyButton);

			// wrap codebock with relative parent element
			codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
			wrapper.appendChild(codeBlock);

			copyButton.addEventListener("click", async () => {
				await copyCode(codeBlock, copyButton);
			});
		}

		async function copyCode(block, button) {
			let code = block.querySelector("code");
			let text = code?.innerText;

			await navigator.clipboard.writeText(text ?? "");

			// visual feedback that task is completed
			button.innerText = "Copied";

			setTimeout(() => {
				button.innerText = copyButtonLabel;
			}, 700);
		}
	}
	attachCopyButtons();

	/** Scrolls the document to the top when the "Back to Top" button is clicked. */
	function backToTop() {
		document.querySelector("#back-to-top")?.addEventListener("click", () => {
			document.body.scrollTop = 0; // For Safari
			document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
		});
	}
	backToTop();
</script>
